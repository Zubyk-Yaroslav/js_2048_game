{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ copyState(state) {\n        return JSON.parse(JSON.stringify(state));\n    }\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ], gameStatus = \"idle\", gameScore = 0){\n        this.initialState = initialState;\n        this.gameStatus = gameStatus;\n        this.gameScore = gameScore;\n        this.state = this.copyState(initialState);\n    }\n    // Function for check if any rows or columns were changed\n    toComapare(comparingArr, toCompare) {\n        if (comparingArr.length !== toCompare.length) return false;\n        return comparingArr.every((val, index)=>{\n            if (Array.isArray(val) && Array.isArray(toCompare[index])) {\n                if (this.toComapare(val, toCompare[index])) return true;\n            } else if (val === toCompare[index]) return true;\n            return false;\n        });\n    }\n    // Function for check if 2048 is present\n    setWinGame(cell) {\n        if (cell === 2048) {\n            this.gameStatus = \"win\";\n            this.getStatus();\n        }\n    }\n    isGameLoseVertical() {\n        for(let i = 0; i < this.state.length; i++){\n            const col = this.state.map((row)=>row[i]);\n            for(let j = 0; j < col.length - 1; j++){\n                if (col[j] === 0 || col[j] === col[j + 1]) return false;\n            }\n        }\n        return true;\n    }\n    isGameLoseHorizontal() {\n        for(let i = 0; i < this.state.length; i++)for(let j = 0; j < this.state[i].length - 1; j++){\n            const row = this.state[i];\n            if (row[j] === 0 || row[j] === row[j + 1]) return false;\n        }\n        return true;\n    }\n    // Function for horizontal moves cell\n    horizontalMoves(direction) {\n        if (this.getStatus() === \"idle\") return;\n        const toCompare = this.copyState(this.state);\n        this.state.map((row, i)=>{\n            const newRow = [];\n            for(let j = 0; j < row.length; j++){\n                let nextIndex = j + 1;\n                if (row[j] === 0) {\n                    nextIndex++;\n                    continue;\n                }\n                if (row[j] !== 0) {\n                    if (nextIndex < row.length && row[j] === row[nextIndex]) {\n                        row[j] += row[nextIndex];\n                        this.gameScore += row[j];\n                        row[nextIndex] = 0;\n                    }\n                    newRow.push(row[j]);\n                }\n            }\n            while(newRow.length < row.length)direction === \"left\" ? newRow.push(0) : newRow.unshift(0);\n            this.state[i] = newRow;\n        });\n        if (!this.toComapare(toCompare, this.state)) this.addNumberAfterStep();\n        if (this.isGameLoseVertical() && this.isGameLoseHorizontal()) {\n            this.gameStatus = \"lose\";\n            this.getStatus();\n        }\n    }\n    // Function for vertical moves cell\n    verticalMoves(direction) {\n        if (this.getStatus() === \"idle\") return;\n        const toCompare = this.copyState(this.state);\n        let col = [];\n        this.state.map((_, i)=>{\n            col = this.state.map((c)=>c[i]);\n            const newColumn = [];\n            for(let j = 0; j < col.length; j++){\n                let nextIndex = j + 1;\n                if (col[j] === 0) {\n                    nextIndex++;\n                    continue;\n                }\n                if (col[j] !== 0) {\n                    if (nextIndex < col.length && col[j] === col[nextIndex]) {\n                        col[j] += col[nextIndex];\n                        this.gameScore += col[j];\n                        col[nextIndex] = 0;\n                    }\n                    newColumn.push(col[j]);\n                }\n            }\n            while(newColumn.length < col.length)direction === \"up\" ? newColumn.push(0) : newColumn.unshift(0);\n            for(let k = 0; k < this.state.length; k++)this.state[k][i] = newColumn[k];\n        });\n        if (!this.toComapare(toCompare, this.state)) this.addNumberAfterStep();\n        if (this.isGameLoseVertical() && this.isGameLoseHorizontal()) {\n            this.gameStatus = \"lose\";\n            this.getStatus();\n        }\n    }\n    moveLeft() {\n        this.horizontalMoves(\"left\");\n    }\n    moveRight() {\n        this.horizontalMoves(\"right\");\n    }\n    moveUp() {\n        this.verticalMoves(\"up\");\n    }\n    moveDown() {\n        this.verticalMoves(\"down\");\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.gameScore;\n    }\n    /**\n   * @returns {number[][]}\n   */ // Function search cell === 0 and fill the number if it's possible\n    getIndexes() {\n        const emptyFields = [];\n        this.state.forEach((row, i)=>{\n            row.forEach((col, j)=>{\n                this.setWinGame(col);\n                if (col === 0) emptyFields.push([\n                    i,\n                    j\n                ]);\n            });\n        });\n        const randomEnptyValues = Math.floor(Math.random() * emptyFields.length);\n        return emptyFields[randomEnptyValues];\n    }\n    getNumber() {\n        return Math.random() < 0.1 ? 4 : 2;\n    }\n    // Function cells with number\n    renderFields(maxNumbers) {\n        const indexes = [];\n        while(indexes.length < maxNumbers){\n            let index = [\n                ...this.getIndexes()\n            ];\n            const includesSubArray = indexes.some((arr)=>arr.every((value, i)=>value === index[i]));\n            if (includesSubArray && maxNumbers === 2) index = [\n                ...this.getIndexes()\n            ];\n            if (!index.length < 0) return;\n            if (this.state[index[0]][index[1]] !== 0) break;\n            indexes.push(index);\n        }\n        for (const [row, col] of indexes)this.state[row][col] = this.getNumber();\n    }\n    getState() {\n        return this.state;\n    }\n    addNumberAfterStep() {\n        this.renderFields(1);\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.gameStatus;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.renderFields(2);\n        this.gameStatus = \"playing\";\n        this.getStatus();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.gameStatus = \"idle\";\n        this.state = this.copyState(this.initialState);\n        this.gameScore = 0;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const gameUIFields = [\n        [],\n        [],\n        [],\n        []\n    ];\n    const gameScoreInfo = document.querySelector(\".game-score\");\n    const startGameButton = document.querySelector(\".button.start\");\n    const messageLose = document.querySelector(\".message-lose\");\n    const messageWin = document.querySelector(\".message-win\");\n    const messageStart = document.querySelector(\".message-start\");\n    const gameFieldRows = [\n        ...document.querySelectorAll(\".field-row\")\n    ];\n    const gameFieldCell = [\n        ...document.querySelectorAll(\".field-row .field-cell\")\n    ];\n    const renderUIFields = ()=>{\n        let cells = [\n            ...gameFieldCell\n        ];\n        gameFieldRows.forEach((_, i)=>{\n            gameUIFields[i] = gameFieldRows[i];\n            gameFieldRows.forEach((__, j)=>{\n                gameUIFields[i][j] = cells[j];\n            });\n            cells = cells.slice(4);\n        });\n    };\n    const renderGameDesc = ()=>{\n        $09e991522ca7e64e$var$game.state.forEach((row, i)=>{\n            row.forEach((coll, j)=>{\n                gameUIFields[i][j].textContent = \"\";\n                if (gameUIFields[i][j].textContent === \"\") gameUIFields[i][j].className = `field-cell`;\n                if (coll > 0) {\n                    gameUIFields[i][j].append(coll);\n                    gameUIFields[i][j].className = `field-cell field-cell--${coll}`;\n                }\n            });\n        });\n    };\n    document.addEventListener(\"click\", (el)=>{\n        switch(el.srcElement.className){\n            case \"button start\":\n                $09e991522ca7e64e$var$game.start();\n                renderUIFields();\n                renderGameDesc();\n                startGameButton.classList.remove(\"start\");\n                startGameButton.classList.add(\"restart\");\n                startGameButton.textContent = \"Restart\";\n                messageStart.classList.add(\"hidden\");\n                gameScoreInfo.textContent = 0;\n                break;\n            case \"button restart\":\n                hideMessageGame(messageLose, \"lose\");\n                hideMessageGame(messageWin, \"win\");\n                gameScoreInfo.textContent = 0;\n                $09e991522ca7e64e$var$game.restart();\n                $09e991522ca7e64e$var$game.start();\n                renderUIFields();\n                renderGameDesc();\n                break;\n            default:\n                break;\n        }\n    });\n    document.addEventListener(\"keydown\", (ev)=>{\n        if ($09e991522ca7e64e$var$game.gameStatus === \"idle\") return;\n        if ($09e991522ca7e64e$var$game.gameStatus === \"win\" || $09e991522ca7e64e$var$game.gameStatus === \"lose\") return;\n        switch(ev.key){\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                renderGameDesc();\n                gameScoreInfo.textContent = $09e991522ca7e64e$var$game.getScore();\n                showMessageGame(messageWin, \"win\");\n                showMessageGame(messageLose, \"lose\");\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                renderGameDesc();\n                gameScoreInfo.textContent = $09e991522ca7e64e$var$game.getScore();\n                showMessageGame(messageWin, \"win\");\n                showMessageGame(messageLose, \"lose\");\n                break;\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                renderGameDesc();\n                gameScoreInfo.textContent = $09e991522ca7e64e$var$game.getScore();\n                showMessageGame(messageWin, \"win\");\n                showMessageGame(messageLose, \"lose\");\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                renderGameDesc();\n                gameScoreInfo.textContent = $09e991522ca7e64e$var$game.getScore();\n                showMessageGame(messageWin, \"win\");\n                showMessageGame(messageLose, \"lose\");\n                break;\n            default:\n                break;\n        }\n    });\n    const showMessageGame = (messageSelector, gameStatus)=>{\n        if ($09e991522ca7e64e$var$game.gameStatus === gameStatus) messageSelector.classList.remove(\"hidden\");\n    };\n    const hideMessageGame = (messageSelector, gameStatus)=>{\n        if ($09e991522ca7e64e$var$game.gameStatus === gameStatus) messageSelector.classList.add(\"hidden\");\n    };\n}); // Write your code here\n\n\n//# sourceMappingURL=index.381bcdec.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const gameUIFields = [[], [], [], []];\n  const gameScoreInfo = document.querySelector('.game-score');\n  const startGameButton = document.querySelector('.button.start');\n  const messageLose = document.querySelector('.message-lose');\n  const messageWin = document.querySelector('.message-win');\n  const messageStart = document.querySelector('.message-start');\n  const gameFieldRows = [...document.querySelectorAll('.field-row')];\n  const gameFieldCell\n    = [...document.querySelectorAll('.field-row .field-cell')];\n\n  const renderUIFields = () => {\n    let cells = [...gameFieldCell];\n\n    gameFieldRows.forEach((_, i) => {\n      gameUIFields[i] = gameFieldRows[i];\n\n      gameFieldRows.forEach((__, j) => {\n        gameUIFields[i][j] = cells[j];\n      });\n      cells = cells.slice(4);\n    });\n  };\n\n  const renderGameDesc = () => {\n    game.state.forEach((row, i) => {\n      row.forEach((coll, j) => {\n        gameUIFields[i][j].textContent = '';\n\n        if (gameUIFields[i][j].textContent === '') {\n          gameUIFields[i][j].className = `field-cell`;\n        }\n\n        if (coll > 0) {\n          gameUIFields[i][j].append(coll);\n          gameUIFields[i][j].className = `field-cell field-cell--${coll}`;\n        }\n      });\n    });\n  };\n\n  document.addEventListener('click', el => {\n    switch (el.srcElement.className) {\n      case 'button start':\n        game.start();\n        renderUIFields();\n        renderGameDesc();\n        startGameButton.classList.remove('start');\n        startGameButton.classList.add('restart');\n        startGameButton.textContent = 'Restart';\n        messageStart.classList.add('hidden');\n        gameScoreInfo.textContent = 0;\n        break;\n      case 'button restart':\n        hideMessageGame(messageLose, 'lose');\n        hideMessageGame(messageWin, 'win');\n        gameScoreInfo.textContent = 0;\n        game.restart();\n        game.start();\n        renderUIFields();\n        renderGameDesc();\n        break;\n      default:\n        break;\n    }\n  });\n\n  document.addEventListener('keydown', ev => {\n    if (game.gameStatus === 'idle') {\n      return;\n    }\n\n    if (game.gameStatus === 'win'\n      || game.gameStatus === 'lose') {\n      return;\n    }\n\n    switch (ev.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        renderGameDesc();\n        gameScoreInfo.textContent = game.getScore();\n        showMessageGame(messageWin, 'win');\n        showMessageGame(messageLose, 'lose');\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        renderGameDesc();\n        gameScoreInfo.textContent = game.getScore();\n        showMessageGame(messageWin, 'win');\n        showMessageGame(messageLose, 'lose');\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        renderGameDesc();\n        gameScoreInfo.textContent = game.getScore();\n        showMessageGame(messageWin, 'win');\n        showMessageGame(messageLose, 'lose');\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        renderGameDesc();\n        gameScoreInfo.textContent = game.getScore();\n        showMessageGame(messageWin, 'win');\n        showMessageGame(messageLose, 'lose');\n        break;\n      default:\n        break;\n    }\n  });\n\n  const showMessageGame = (messageSelector, gameStatus) => {\n    if (game.gameStatus === gameStatus) {\n      messageSelector.classList.remove('hidden');\n    }\n  };\n\n  const hideMessageGame = (messageSelector, gameStatus) => {\n    if (game.gameStatus === gameStatus) {\n      messageSelector.classList.add('hidden');\n    }\n  };\n});\n\n// Write your code here\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  copyState(state) {\n    return JSON.parse(JSON.stringify(state));\n  }\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    gameStatus = 'idle',\n    gameScore = 0) {\n    this.initialState = initialState;\n    this.gameStatus = gameStatus;\n    this.gameScore = gameScore;\n    this.state = this.copyState(initialState);\n  }\n  // Function for check if any rows or columns were changed\n  toComapare(comparingArr, toCompare) {\n    if (comparingArr.length !== toCompare.length) {\n      return false;\n    }\n\n    return comparingArr.every((val, index) => {\n      if (Array.isArray(val) && Array.isArray(toCompare[index])) {\n        if (this.toComapare(val, toCompare[index])) {\n          return true;\n        };\n      } else if (val === toCompare[index]) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  // Function for check if 2048 is present\n  setWinGame(cell) {\n    if (cell === 2048) {\n      this.gameStatus = 'win';\n      this.getStatus();\n    }\n  }\n\n  isGameLoseVertical() {\n    for (let i = 0; i < this.state.length; i++) {\n      const col = this.state.map(row => row[i]);\n\n      for (let j = 0; j < col.length - 1; j++) {\n        if (col[j] === 0 || col[j] === col[j + 1]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  isGameLoseHorizontal() {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length - 1; j++) {\n        const row = this.state[i];\n\n        if (row[j] === 0 || row[j] === row[j + 1]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  // Function for horizontal moves cell\n  horizontalMoves(direction) {\n    if (this.getStatus() === 'idle') {\n      return;\n    }\n\n    const toCompare = this.copyState(this.state);\n\n    this.state.map((row, i) => {\n      const newRow = [];\n\n      for (let j = 0; j < row.length; j++) {\n        let nextIndex = j + 1;\n\n        if (row[j] === 0) {\n          nextIndex++;\n          continue;\n        }\n\n        if (row[j] !== 0) {\n          if (nextIndex < row.length && row[j] === row[nextIndex]) {\n            row[j] += row[nextIndex];\n            this.gameScore += row[j];\n            row[nextIndex] = 0;\n          }\n          newRow.push(row[j]);\n        }\n      }\n\n      while (newRow.length < row.length) {\n        direction === 'left' ? newRow.push(0) : newRow.unshift(0);\n      }\n      this.state[i] = newRow;\n    });\n\n    if (!this.toComapare(toCompare, this.state)) {\n      this.addNumberAfterStep();\n    }\n\n    if (this.isGameLoseVertical() && this.isGameLoseHorizontal()) {\n      this.gameStatus = 'lose';\n      this.getStatus();\n    }\n  }\n\n  // Function for vertical moves cell\n  verticalMoves(direction) {\n    if (this.getStatus() === 'idle') {\n      return;\n    }\n\n    const toCompare = this.copyState(this.state);\n    let col = [];\n\n    this.state.map((_, i) => {\n      col = this.state.map(c => c[i]);\n\n      const newColumn = [];\n\n      for (let j = 0; j < col.length; j++) {\n        let nextIndex = j + 1;\n\n        if (col[j] === 0) {\n          nextIndex++;\n          continue;\n        }\n\n        if (col[j] !== 0) {\n          if (nextIndex < col.length && col[j] === col[nextIndex]) {\n            col[j] += col[nextIndex];\n            this.gameScore += col[j];\n            col[nextIndex] = 0;\n          }\n          newColumn.push(col[j]);\n        }\n      }\n\n      while (newColumn.length < col.length) {\n        direction === 'up' ? newColumn.push(0) : newColumn.unshift(0);\n      }\n\n      for (let k = 0; k < this.state.length; k++) {\n        this.state[k][i] = newColumn[k];\n      }\n    });\n\n    if (!this.toComapare(toCompare, this.state)) {\n      this.addNumberAfterStep();\n    }\n\n    if (this.isGameLoseVertical() && this.isGameLoseHorizontal()) {\n      this.gameStatus = 'lose';\n      this.getStatus();\n    }\n  }\n\n  moveLeft() {\n    this.horizontalMoves('left');\n  }\n\n  moveRight() {\n    this.horizontalMoves('right');\n  }\n\n  moveUp() {\n    this.verticalMoves('up');\n  }\n\n  moveDown() {\n    this.verticalMoves('down');\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.gameScore;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n\n  // Function search cell === 0 and fill the number if it's possible\n  getIndexes() {\n    const emptyFields = [];\n\n    this.state.forEach((row, i) => {\n      row.forEach((col, j) => {\n        this.setWinGame(col);\n\n        if (col === 0) {\n          emptyFields.push([i, j]);\n        }\n      });\n    });\n\n    const randomEnptyValues = Math.floor(Math.random() * emptyFields.length);\n\n    return emptyFields[randomEnptyValues];\n  }\n\n  getNumber() {\n    return Math.random() < 0.1 ? 4 : 2;\n  }\n\n  // Function cells with number\n  renderFields(maxNumbers) {\n    const indexes = [];\n\n    while (indexes.length < maxNumbers) {\n      let index = [...this.getIndexes()];\n\n      const includesSubArray = indexes.some(arr =>\n        arr.every((value, i) => value === index[i]));\n\n      if (includesSubArray && maxNumbers === 2) {\n        index = [...this.getIndexes()];\n      }\n\n      if (!index.length < 0) {\n        return;\n      }\n\n      if (this.state[index[0]][index[1]] !== 0) {\n        break;\n      }\n\n      indexes.push(index);\n    }\n\n    for (const [row, col] of indexes) {\n      this.state[row][col] = this.getNumber();\n    }\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  addNumberAfterStep() {\n    this.renderFields(1);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.gameStatus;\n  }\n\n  /**\n   * Starts the game.\n   */\n\n  start() {\n    this.renderFields(2);\n    this.gameStatus = 'playing';\n    this.getStatus();\n  }\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.gameStatus = 'idle';\n    this.state = this.copyState(this.initialState);\n    this.gameScore = 0;\n  }\n\n  // Add your own methods here\n}\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","copyState","state","JSON","parse","stringify","constructor","initialState","gameStatus","gameScore","toComapare","comparingArr","toCompare","length","every","val","index","Array","isArray","setWinGame","cell","getStatus","isGameLoseVertical","i","col","map","row","j","isGameLoseHorizontal","horizontalMoves","direction","newRow","nextIndex","push","unshift","addNumberAfterStep","verticalMoves","_","c","newColumn","k","moveLeft","moveRight","moveUp","moveDown","getScore","getIndexes","emptyFields","forEach","randomEnptyValues","Math","floor","random","getNumber","renderFields","maxNumbers","indexes","some","arr","value","getState","start","restart","document","addEventListener","gameUIFields","gameScoreInfo","querySelector","startGameButton","messageLose","messageWin","messageStart","gameFieldRows","querySelectorAll","gameFieldCell","renderUIFields","cells","__","slice","renderGameDesc","coll","textContent","className","append","el","srcElement","classList","remove","add","hideMessageGame","ev","key","showMessageGame","messageSelector"],"version":3,"file":"index.381bcdec.js.map"}